.. -*- mode:rst -*-

===============================
 PyDedupe - Duplicate Detector
===============================

PyDedupe links similar pairs of records within a list of records,
or between two lists of records.  The output consists of 
pairs of records that PyDedupe considers to be very similar.  

Where those records came from (CSV, database) and what you do with the
similar pairs (delete one, merge both) is left as an exercise.

PyDedupe finds those similar pairs of records in three steps:

 1. Index records.  For example, put all persons
 with the same soundex of their last name into the same index block.

 2. Comparing all pairs in each index block.  For example,
 calculate the name and phone number edit distance, phone numbers for all pairs
 of people having the same soundex for their surname.  This produces 
 a similarity vector such as (0.5, 0.2, 1.0, 0.6) for each pais of records.
 
 3. Classifying the similarity vectors from the comparisons into "matches"
 and "non-matches".  A vector like (1.0,1.0,1.0) is clearly a "match",
 and (0.0,0.0,0.0) is clearly a non-match.

Each steps needs some configuration: defining the index blocks, defining
the comparisons to go into the similarity vector, and defining the criteria
for classifying the pairs.  The setup will be different for every schema.

There is a convenience function that takes your index definition, 
comparator definition, classifier definition and list(s) of records, 
and returns the most similar pairs.  You can also define your own process
from the pieces.


FEBRL: Freely Extensible Biomedical Record Linkage
==================================================

The _FEBRL project provides a wide selection of encoding, comparison
and classification methods.  However, although it implements many methods,
the rest of FEBRL's class hierarchy places artificial limitations 
on how the methods can be used in indexing and comparison.  

PyDedupe includes the following FEBRL modules, while providing complete 
flexibility in defining indeces and comparison metric:

- `febrl.classification`: Classifiers, such as KMeans and SVM
- `febrl.comparison`: String comparison objects, such as edit distance
- `febrl.encode`: String encoding functions, such as Double Metaphone




In contrast, this dedupe is a Pythonic library: input and output are
lists of tuples, and any suitable functions may be specified or
composed to index or compare records, to give this library maximum
generality.  The records being deduplicated need not even be using
strings: you are able to specify value comparators for any objects you
want to compare.

__ FEBRL_ http://sourceforge.net/projects/febrl
